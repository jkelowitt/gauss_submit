#!/bin/env python3

"""
Gauss09 file submission script maker

@Original Author: Josh Wheeler
@Original Author Email: jwheels91@gmail.com

@Current Author: Jackson Elowitt
@Current Author Email: jkelowitt@protonmail.com
"""

import os
from glob import glob
from sys import argv
from time import sleep

shfile = """#!/bin/bash

#SBATCH --nodes=1 
#SBATCH --ntasks={0}
#SBATCH --mem={1}GB
#SBATCH -t {2}:{3}:00
{4}

export TEMPORARY_DIR=/tmp/$SLURM_JOB_ID
export MACHINEFILE=`/fslapps/fslutils/generate_pbs_nodefile`
export SCRATCH_DIR="$TEMPORARY_DIR/temporary_files"
export JOB_NAME={5}
export JOB_SOURCE_DIR="$SLURM_SUBMIT_DIR"

echo "---------------------------------------------------------"
echo "Gaussian09 Job Output Information:"
echo "---------------------------------------------------------"
echo "Current node:"
cat "$MACHINEFILE"
echo "---------------------------------------------------------"
echo "JOB START TIME: $(date)"

module load g09

/fslapps/gaussian09/B.01/EM64T/g09/g09 < "{5}.com" > "{5}.log"

echo "---------------------------------------------------------"
echo "JOB END TIME: $(date)"
echo "---------------------------------------------------------"
exit EXIT_CODE=$?
#echo $EXIT_CODE
"""

# Gathering Inputs
INPUT = [i for i in argv[1:]]

count_limit = 0
limit = False


def yes_no(prompt: str) -> bool:
    """Returns True if Yes, False if No."""
    yes = ["y", "Y", "Yes", "1"]
    no = ["N", "n", "No", "0"]

    while True:
        done = input(f"{prompt} (y/n): ")
        if done in yes + no:
            break

    return done in yes


def read_input(items):
    """Converts argv into the appropriate variables for use."""
    test = (items[-1] == "-t")
    cpus = str(items[0])
    mem = str(items[1])
    hours = str(items[2]).zfill(2)
    minutes = str(items[3]).zfill(2)
    return cpus, mem, hours, minutes, test


cpus, mem, hours, minutes, test = read_input(INPUT)

test = "#SBATCH --qos=test" if test else ""

# Finding the input file in the directory
files = glob("*.com")
files.sort()

# Prompt for submission
ready = (f"""
Are you ready to submit these jobs?: 
----------------------------
CPUS: {cpus}
Memory: {mem}
Time: {hours}:{minutes}:00
File Count: {len(files)}
----------------------------\n""")

print(ready)

if len(files) >= 5000:
    print("You have a lot of files. You may get rate limited.")
    print("Would you like to use a delayed submission?")
    print("This will submit up to a specified number of jobs before waiting out the wall time")
    print(" so that the number of active jobs never reaches the specified limit.")
    print("You will also need to keep your terminal open the whole time.")
    limit = yes_no("")

    if limit:
        count_limit = int(input("How many jobs do you want active at the same time: "))

begin = yes_no("Begin Submissions")

# Actual Submission
if begin == "y":
    for i, file in enumerate(files):
        filename = file[:-4]  # Without ".com"

        # Make the formatted shell script
        submit = shfile.format(cpus, mem, hours, minutes, test, filename)

        # Writing to .sh template
        with open(f'{filename}.sh', 'w') as SH:
            SH.write(submit)

        # Submitting to bash
        os.system(f"sbatch {filename}.sh")

        if limit and (count_limit // (i + 1) == 0):
            hours_in_seconds = int(hours) * 3600
            min_in_sec = int(minutes) * 60
            seconds = hours_in_seconds + min_in_sec

            print(f"Waiting for {int(hours)} hours, and {int(minutes) + 1} minutes.")

            # Wait out the wall time
            sleep(hours_in_seconds + min_in_sec + 60)

else:  # Fail safe, if ANYTHING other than 'y' is entered, cancel the operation.
    print("The Job Was Not Submitted")
